// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum JobStatus {
  live
  closed
}

enum SalaryType {
  free
  paid
}

enum ApplicationStatus {
  pending
  interview
  accepted
  rejected
}

//// ===== MODELS ===== ////

model Company {
  id               String                 @id @default(uuid())
  companyName      String
  email            String                 @unique
  password         String
  phone            String?
  linkedinUrl      String?
  instagram        String?
  websiteUrl       String?
  foundedAt        DateTime?
  employeeCount    String? // could be number or range
  headQuarter      String? // multiple locations
  branches         String[] // multiple branches
  industries       String[] // multiple industries
  organizationType String?
  workEnvironment  String?
  logoUrl          String?
  description      String?
  techStack        String[] // plain array
  contactName      String?
  contactEmail     String?
  contactPhone     String?
  contactJobTitle  String?
  images           String[] // company pictures
  teamSize         String?
  team             Json? // [{profilePic, name, position, socialLinks}]
  jobs             Job[] // relation: one company -> many jobs
  dashboard        CompanyDashboardStats?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Talent {
  id                 String                @id @default(uuid())
  fullName           String
  email              String                @unique
  password           String
  phoneNumber        String?
  languages          String[] // array of languages
  linkedinUrl        String?
  personalWebsite    String?
  instagramUrl       String?
  locations          String?
  fieldOfStudy       String? // e.g., Computer Science, Design
  program            String?
  workingEnvironment String?
  bio                String?
  preferredRole      String?
  aboutMe            String?
  experiences        Json? // [{title, company, env, period, location, desc}]
  education          Json? // [{institution, program, field, year, desc}]
  skills             String[] // array of skills
  gender             Gender?
  profileImageUrl    String?
  rating             Float?
  address            String?
  yearsExperience    Int?
  resumeUrl          String?
  availableForWork   Boolean               @default(false)
  settings           Json? // small settings flags
  applications       JobApplication[] // relation: one talent -> many applications
  dashboard          TalentDashboardStats?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id                 String           @id @default(uuid())
  companyId          String
  title              String
  environmentType    String
  categories         String[]
  salaryType         SalaryType
  salaryRange        String?
  responsibilities   String?
  description        String
  professionalSkills String[]
  tags               String[]
  minExperienceYears Int?
  degree             String?
  location           String
  status             JobStatus        @default(live)
  capacity           Int?
  requiredSkills     String[]
  applications       JobApplication[] // one job -> many applications

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplication {
  id        String            @id @default(uuid())
  jobId     String
  talentId  String
  status    ApplicationStatus @default(pending)
  appliedAt DateTime          @default(now())

  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  talent Talent @relation(fields: [talentId], references: [id], onDelete: Cascade)
}

model CompanyDashboardStats {
  id                String @id @default(uuid())
  companyId         String @unique
  newCandidates     Int    @default(0)
  totalJobsPosted   Int    @default(0)
  messagesReceived  Int    @default(0)
  jobStatistics     Json?
  openJobs          Int    @default(0)
  applicantsSummary Json?
  jobUpdates        Json?

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model TalentDashboardStats {
  id                String @id @default(uuid())
  talentId          String @unique
  totalJobsApplied  Int    @default(0)
  interviewCount    Int    @default(0)
  jobsStatusSummary Json?
  upcomingInterview Json?

  talent Talent @relation(fields: [talentId], references: [id], onDelete: Cascade)
}
