---
description: 
globs: 
alwaysApply: true
---
Project scope

Implement only the five endpoints described:

GET /companies/:companyId/applications

GET /companies/:companyId/applications/:applicationId

PATCH /companies/:companyId/applications/:applicationId/stage

POST /companies/:companyId/applications/:applicationId/notes

GET /companies/:companyId/applications/:applicationId/notes

Follow Clean Architecture: validators → routes → controllers → services → prisma.

No UI work required; server-only.

Tech stack & infra

TypeScript + Node 18+.

Express for HTTP server.

Prisma for DB access (Postgres).

Zod for validation.

Jest (or Vitest) + supertest for testing.

ESLint + Prettier for style.

Coding standards (must)

All public functions must have explicit return types.

All inputs validated with Zod in route layer.

Controller must only orchestrate request → service → response — no direct DB calls.

Services must contain the Prisma logic and transactions.

Use prisma.$transaction for multi-step DB changes (stage change + history).

Protect company-scoped endpoints: ensure the companyId param is validated and that job/application belongs to the company.

Use soft error messages (no leaking raw SQL or stack traces in responses).

Authorization & authentication

authenticate middleware must populate req.user with at least { talentId?, companyId?, roles?: string[] }.

Company endpoints must ensure the caller is a company member (check CompanyMember).

Talent-owner access: allow the talent to view their own application on GET /applications/:id.

Validation rules

IDs must be UUIDs.

stageKey must match the ApplicationStatus enum values.

Note content must be 1–5000 characters.

Pagination: page >= 1, limit between 1 and 100.

API behavior & response format

Success: 200 (or 201 for created), respond with JSON bodies (not HTML).

Errors: respond with appropriate HTTP status (400 validation, 401 unauthorized, 403 forbidden, 404 not found, 500 server error).

For list endpoints return { total, page, limit, items }.

Tests (must)

Unit tests: at least 80% branch coverage for service functions.

Integration tests: one test per endpoint covering:

Auth failure (401)

Authorization failure (403)

Happy path (200/201)

Validation errors (400)

Tests must run via npm test or yarn test.

Documentation & deliverables

README with run/test instructions and env vars required.

OpenAPI snippet covering the five endpoints with example requests/responses.

Migration SQL or Prisma model additions (if any) clearly included in repository.

Short developer note describing decisions (why stage on JobApplication, transaction reasoning).

PR / review rules

Single feature per PR.

PR must include:

Unit + integration test results (CI pipeline)

A short description of the design

How to run locally

CHANGELOG.md entry summarizing the feature

Code review must check:

proper validation

authorization checks

effective use of transactions

tests pass & coverage

Grading / Acceptance criteria (for the reviewer)

All five endpoints implemented, pass tests, and meet validation/auth rules.

Services contain no raw SQL strings — use Prisma ORM only.

Clean separation of concerns (controllers do not call Prisma).

Adequate tests and README present.


APIs return correct minimal fields for list endpoint and full data for detail endpoint.